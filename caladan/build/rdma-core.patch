diff --git a/providers/mlx5/dr_domain.c b/providers/mlx5/dr_domain.c
index 5e172d09..61aa29f2 100644
--- a/providers/mlx5/dr_domain.c
+++ b/providers/mlx5/dr_domain.c
@@ -206,9 +206,9 @@ static int dr_domain_caps_init(struct ibv_context *ctx,
 	/* Non FDB type is supported over root table or when we can enable
 	 * force-loopback.
 	 */
-	if ((dmn->type != MLX5DV_DR_DOMAIN_TYPE_FDB) &&
-	    !dmn->info.caps.roce_caps.fl_rc_qp_when_roce_enabled)
-		return 0;
+//	if ((dmn->type != MLX5DV_DR_DOMAIN_TYPE_FDB) &&
+//	    !dmn->info.caps.roce_caps.fl_rc_qp_when_roce_enabled)
+//		return 0;
 
 	ret = dr_domain_query_fdb_caps(ctx, dmn);
 	if (ret)
@@ -321,6 +321,7 @@ mlx5dv_dr_domain_create(struct ibv_context *ctx,
 	dmn->type = type;
 	atomic_init(&dmn->refcount, 1);
 	list_head_init(&dmn->tbl_list);
+	dmn->spinlock = 0;
 
 	if (dr_domain_caps_init(ctx, dmn)) {
 		dr_dbg(dmn, "Failed init domain, no caps\n");
diff --git a/providers/mlx5/dr_rule.c b/providers/mlx5/dr_rule.c
index 9239fe5d..8082ab58 100644
--- a/providers/mlx5/dr_rule.c
+++ b/providers/mlx5/dr_rule.c
@@ -32,6 +32,7 @@
 
 #include <stdlib.h>
 #include <ccan/minmax.h>
+#include "mlx5dv.h"
 #include "mlx5dv_dr.h"
 
 #define DR_RULE_MAX_STE_CHAIN (DR_RULE_MAX_STES + DR_ACTION_MAX_STES)
@@ -1341,6 +1342,41 @@ struct mlx5dv_dr_rule *mlx5dv_dr_rule_create(struct mlx5dv_dr_matcher *matcher,
 	return rule;
 }
 
+
+int switch_qp_action(struct mlx5dv_dr_rule *rule,
+	struct mlx5dv_dr_domain *dmn,
+	struct ibv_qp *nqp, struct ibv_qp *pqp)
+{
+	uint64_t old_qp_index, new_qp_index;
+	struct dr_ste *ste = &rule->rx.nic_matcher->s_htbl->ste_arr[0];
+	struct mlx5_qp *next_qp = to_mqp(nqp);
+	struct mlx5_qp *prev_qp = to_mqp(pqp);
+	struct postsend_info send_info = {};
+
+	assert(dmn->spinlock == 1);
+
+	assert(ste->htbl->chunk->num_of_entries == 1);
+
+	old_qp_index = DEVX_GET(ste_general, ste->hw_ste, next_table_base_39_32_size) << 27;
+	old_qp_index |= DEVX_GET(ste_general, ste->hw_ste, next_table_base_31_5_size);
+	old_qp_index &= ~0x1;
+
+	assert(old_qp_index == ((prev_qp->tir_icm_addr >> 5) & 0xffffffff));
+
+	new_qp_index = (next_qp->tir_icm_addr >> 5) | 1;
+	DEVX_SET(ste_general, ste->hw_ste, next_table_base_39_32_size, new_qp_index >> 27);
+	DEVX_SET(ste_general, ste->hw_ste, next_table_base_31_5_size, new_qp_index);
+
+	send_info.write.addr    = (uintptr_t) ste->hw_ste;
+	send_info.write.length  = DR_STE_SIZE_REDUCED;
+	send_info.write.lkey    = 0;
+	send_info.remote_addr   = dr_ste_get_mr_addr(ste);
+	send_info.rkey          = ste->htbl->chunk->rkey;
+
+	return dr_postsend_icm_data_unlocked(dmn, &send_info);
+}
+
+
 int mlx5dv_dr_rule_destroy(struct mlx5dv_dr_rule *rule)
 {
 	struct mlx5dv_dr_matcher *matcher = rule->matcher;
diff --git a/providers/mlx5/dr_send.c b/providers/mlx5/dr_send.c
index cf58c02a..5469e39b 100644
--- a/providers/mlx5/dr_send.c
+++ b/providers/mlx5/dr_send.c
@@ -39,7 +39,7 @@
 
 #define QUEUE_SIZE		128
 #define SIGNAL_PER_DIV_QUEUE	16
-#define TH_NUMS_TO_DRAIN	2
+#define TH_NUMS_TO_DRAIN	3
 
 enum {
 	CQ_OK = 0,
@@ -616,7 +616,7 @@ static void dr_fill_data_segs(struct dr_send_ring *send_ring,
 		send_info->read.send_flags = 0;
 }
 
-static int dr_postsend_icm_data(struct mlx5dv_dr_domain *dmn,
+int dr_postsend_icm_data_unlocked(struct mlx5dv_dr_domain *dmn,
 				struct postsend_info *send_info)
 {
 	struct dr_send_ring *send_ring = dmn->send_ring;
@@ -645,6 +645,31 @@ static int dr_postsend_icm_data(struct mlx5dv_dr_domain *dmn,
 	return 0;
 }
 
+void postsend_lock(struct mlx5dv_dr_domain *dmn)
+{
+	while (__sync_lock_test_and_set(&dmn->spinlock, 1)) {
+		while (dmn->spinlock)
+			asm volatile("pause");
+	}
+}
+
+void postsend_unlock(struct mlx5dv_dr_domain *dmn)
+{
+	__sync_lock_release(&dmn->spinlock);
+}
+
+static int dr_postsend_icm_data(struct mlx5dv_dr_domain *dmn,
+				struct postsend_info *send_info)
+{
+	int ret;
+
+	postsend_lock(dmn);
+	ret = dr_postsend_icm_data_unlocked(dmn, send_info);
+	postsend_unlock(dmn);
+
+	return ret;
+}
+
 static int dr_get_tbl_copy_details(struct mlx5dv_dr_domain *dmn,
 				   struct dr_ste_htbl *htbl,
 				   uint8_t **data,
diff --git a/providers/mlx5/libmlx5.map b/providers/mlx5/libmlx5.map
index 7fd90ec0..5e289e07 100644
--- a/providers/mlx5/libmlx5.map
+++ b/providers/mlx5/libmlx5.map
@@ -105,6 +105,9 @@ MLX5_1.10 {
 		mlx5dv_dr_table_create;
 		mlx5dv_dr_table_destroy;
 		mlx5dv_qp_ex_from_ibv_qp_ex;
+		switch_qp_action;
+		postsend_lock;
+		postsend_unlock;
 } MLX5_1.9;
 
 MLX5_1.11 {
diff --git a/providers/mlx5/mlx5.c b/providers/mlx5/mlx5.c
index 0a091f5b..99fc094f 100644
--- a/providers/mlx5/mlx5.c
+++ b/providers/mlx5/mlx5.c
@@ -807,6 +807,13 @@ int mlx5dv_query_device(struct ibv_context *ctx_in,
 		}
 	}
 
+	if (attrs_out->comp_mask & MLX5DV_CONTEXT_MASK_HCA_CORE_CLOCK) {
+		if (mctx->hca_core_clock) {
+			attrs_out->hca_core_clock = mctx->hca_core_clock;
+			comp_mask_out |= MLX5DV_CONTEXT_MASK_HCA_CORE_CLOCK;
+		}
+	}
+
 	attrs_out->comp_mask = comp_mask_out;
 
 	return 0;
diff --git a/providers/mlx5/mlx5dv.h b/providers/mlx5/mlx5dv.h
index 07d3c3dc..20e6d7c9 100644
--- a/providers/mlx5/mlx5dv.h
+++ b/providers/mlx5/mlx5dv.h
@@ -1490,6 +1490,13 @@ mlx5dv_dr_rule_create(struct mlx5dv_dr_matcher *matcher,
 		      size_t num_actions,
 		      struct mlx5dv_dr_action *actions[]);
 
+
+void postsend_lock(struct mlx5dv_dr_domain *dmn);
+void postsend_unlock(struct mlx5dv_dr_domain *dmn);
+int switch_qp_action(struct mlx5dv_dr_rule *rule,
+	struct mlx5dv_dr_domain *dmn,
+	struct ibv_qp *nqp, struct ibv_qp *pqp);
+
 int mlx5dv_dr_rule_destroy(struct mlx5dv_dr_rule *rule);
 
 enum mlx5dv_dr_action_flags {
diff --git a/providers/mlx5/mlx5dv_dr.h b/providers/mlx5/mlx5dv_dr.h
index 091a797c..1f2f27a5 100644
--- a/providers/mlx5/mlx5dv_dr.h
+++ b/providers/mlx5/mlx5dv_dr.h
@@ -731,6 +731,7 @@ struct mlx5dv_dr_domain {
 	struct dr_domain_info		info;
 	struct list_head		tbl_list;
 	uint32_t			flags;
+	int spinlock;
 };
 
 struct dr_table_rx_tx {
@@ -1176,6 +1177,8 @@ struct dr_send_ring {
 int dr_send_ring_alloc(struct mlx5dv_dr_domain *dmn);
 void dr_send_ring_free(struct dr_send_ring *send_ring);
 int dr_send_ring_force_drain(struct mlx5dv_dr_domain *dmn);
+int dr_postsend_icm_data_unlocked(struct mlx5dv_dr_domain *dmn,
+				struct postsend_info *send_info);
 int dr_send_postsend_ste(struct mlx5dv_dr_domain *dmn, struct dr_ste *ste,
 			 uint8_t *data, uint16_t size, uint16_t offset);
 int dr_send_postsend_htbl(struct mlx5dv_dr_domain *dmn, struct dr_ste_htbl *htbl,
