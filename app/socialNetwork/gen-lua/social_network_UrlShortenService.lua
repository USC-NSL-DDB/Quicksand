--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'social_network_ttypes'

UrlShortenServiceClient = __TObject.new(__TClient, {
  __type = 'UrlShortenServiceClient'
})

function UrlShortenServiceClient:ComposeUrls(req_id, urls)
  self:send_ComposeUrls(req_id, urls)
  return self:recv_ComposeUrls(req_id, urls)
end

function UrlShortenServiceClient:send_ComposeUrls(req_id, urls)
  self.oprot:writeMessageBegin('ComposeUrls', TMessageType.CALL, self._seqid)
  local args = ComposeUrls_args:new{}
  args.req_id = req_id
  args.urls = urls
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UrlShortenServiceClient:recv_ComposeUrls(req_id, urls)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ComposeUrls_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function UrlShortenServiceClient:GetExtendedUrls(req_id, shortened_urls)
  self:send_GetExtendedUrls(req_id, shortened_urls)
  return self:recv_GetExtendedUrls(req_id, shortened_urls)
end

function UrlShortenServiceClient:send_GetExtendedUrls(req_id, shortened_urls)
  self.oprot:writeMessageBegin('GetExtendedUrls', TMessageType.CALL, self._seqid)
  local args = GetExtendedUrls_args:new{}
  args.req_id = req_id
  args.shortened_urls = shortened_urls
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function UrlShortenServiceClient:recv_GetExtendedUrls(req_id, shortened_urls)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetExtendedUrls_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
UrlShortenServiceIface = __TObject:new{
  __type = 'UrlShortenServiceIface'
}


UrlShortenServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'UrlShortenServiceProcessor'
})

function UrlShortenServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function UrlShortenServiceProcessor:process_ComposeUrls(seqid, iprot, oprot, server_ctx)
  local args = ComposeUrls_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ComposeUrls_result:new{}
  local status, res = pcall(self.handler.ComposeUrls, self.handler, args.req_id, args.urls)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ComposeUrls', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function UrlShortenServiceProcessor:process_GetExtendedUrls(seqid, iprot, oprot, server_ctx)
  local args = GetExtendedUrls_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetExtendedUrls_result:new{}
  local status, res = pcall(self.handler.GetExtendedUrls, self.handler, args.req_id, args.shortened_urls)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetExtendedUrls', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

ComposeUrls_args = __TObject:new{
  req_id,
  urls
}

function ComposeUrls_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.urls = {}
        local _etype99, _size96 = iprot:readListBegin()
        for _i=1,_size96 do
          local _elem100 = iprot:readString()
          table.insert(self.urls, _elem100)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ComposeUrls_args:write(oprot)
  oprot:writeStructBegin('ComposeUrls_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.urls ~= nil then
    oprot:writeFieldBegin('urls', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.urls)
    for _,iter101 in ipairs(self.urls) do
      oprot:writeString(iter101)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ComposeUrls_result = __TObject:new{
  success,
  se
}

function ComposeUrls_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype105, _size102 = iprot:readListBegin()
        for _i=1,_size102 do
          local _elem106 = Url:new{}
          _elem106:read(iprot)
          table.insert(self.success, _elem106)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ComposeUrls_result:write(oprot)
  oprot:writeStructBegin('ComposeUrls_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter107 in ipairs(self.success) do
      iter107:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetExtendedUrls_args = __TObject:new{
  req_id,
  shortened_urls
}

function GetExtendedUrls_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.shortened_urls = {}
        local _etype111, _size108 = iprot:readListBegin()
        for _i=1,_size108 do
          local _elem112 = iprot:readString()
          table.insert(self.shortened_urls, _elem112)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetExtendedUrls_args:write(oprot)
  oprot:writeStructBegin('GetExtendedUrls_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.shortened_urls ~= nil then
    oprot:writeFieldBegin('shortened_urls', TType.LIST, 2)
    oprot:writeListBegin(TType.STRING, #self.shortened_urls)
    for _,iter113 in ipairs(self.shortened_urls) do
      oprot:writeString(iter113)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetExtendedUrls_result = __TObject:new{
  success,
  se
}

function GetExtendedUrls_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype117, _size114 = iprot:readListBegin()
        for _i=1,_size114 do
          local _elem118 = iprot:readString()
          table.insert(self.success, _elem118)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetExtendedUrls_result:write(oprot)
  oprot:writeStructBegin('GetExtendedUrls_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRING, #self.success)
    for _,iter119 in ipairs(self.success) do
      oprot:writeString(iter119)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end