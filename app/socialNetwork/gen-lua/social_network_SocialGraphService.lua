--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


require 'Thrift'
require 'social_network_ttypes'

SocialGraphServiceClient = __TObject.new(__TClient, {
  __type = 'SocialGraphServiceClient'
})

function SocialGraphServiceClient:GetFollowers(req_id, user_id)
  self:send_GetFollowers(req_id, user_id)
  return self:recv_GetFollowers(req_id, user_id)
end

function SocialGraphServiceClient:send_GetFollowers(req_id, user_id)
  self.oprot:writeMessageBegin('GetFollowers', TMessageType.CALL, self._seqid)
  local args = GetFollowers_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_GetFollowers(req_id, user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetFollowers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SocialGraphServiceClient:GetFollowees(req_id, user_id)
  self:send_GetFollowees(req_id, user_id)
  return self:recv_GetFollowees(req_id, user_id)
end

function SocialGraphServiceClient:send_GetFollowees(req_id, user_id)
  self.oprot:writeMessageBegin('GetFollowees', TMessageType.CALL, self._seqid)
  local args = GetFollowees_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_GetFollowees(req_id, user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetFollowees_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function SocialGraphServiceClient:Follow(req_id, user_id, followee_id)
  self:send_Follow(req_id, user_id, followee_id)
  self:recv_Follow(req_id, user_id, followee_id)
end

function SocialGraphServiceClient:send_Follow(req_id, user_id, followee_id)
  self.oprot:writeMessageBegin('Follow', TMessageType.CALL, self._seqid)
  local args = Follow_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.followee_id = followee_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_Follow(req_id, user_id, followee_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = Follow_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphServiceClient:Unfollow(req_id, user_id, followee_id)
  self:send_Unfollow(req_id, user_id, followee_id)
  self:recv_Unfollow(req_id, user_id, followee_id)
end

function SocialGraphServiceClient:send_Unfollow(req_id, user_id, followee_id)
  self.oprot:writeMessageBegin('Unfollow', TMessageType.CALL, self._seqid)
  local args = Unfollow_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.followee_id = followee_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_Unfollow(req_id, user_id, followee_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = Unfollow_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphServiceClient:FollowWithUsername(req_id, user_usernmae, followee_username)
  self:send_FollowWithUsername(req_id, user_usernmae, followee_username)
  self:recv_FollowWithUsername(req_id, user_usernmae, followee_username)
end

function SocialGraphServiceClient:send_FollowWithUsername(req_id, user_usernmae, followee_username)
  self.oprot:writeMessageBegin('FollowWithUsername', TMessageType.CALL, self._seqid)
  local args = FollowWithUsername_args:new{}
  args.req_id = req_id
  args.user_usernmae = user_usernmae
  args.followee_username = followee_username
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_FollowWithUsername(req_id, user_usernmae, followee_username)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = FollowWithUsername_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphServiceClient:UnfollowWithUsername(req_id, user_usernmae, followee_username)
  self:send_UnfollowWithUsername(req_id, user_usernmae, followee_username)
  self:recv_UnfollowWithUsername(req_id, user_usernmae, followee_username)
end

function SocialGraphServiceClient:send_UnfollowWithUsername(req_id, user_usernmae, followee_username)
  self.oprot:writeMessageBegin('UnfollowWithUsername', TMessageType.CALL, self._seqid)
  local args = UnfollowWithUsername_args:new{}
  args.req_id = req_id
  args.user_usernmae = user_usernmae
  args.followee_username = followee_username
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_UnfollowWithUsername(req_id, user_usernmae, followee_username)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UnfollowWithUsername_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function SocialGraphServiceClient:InsertUser(req_id, user_id)
  self:send_InsertUser(req_id, user_id)
  self:recv_InsertUser(req_id, user_id)
end

function SocialGraphServiceClient:send_InsertUser(req_id, user_id)
  self.oprot:writeMessageBegin('InsertUser', TMessageType.CALL, self._seqid)
  local args = InsertUser_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function SocialGraphServiceClient:recv_InsertUser(req_id, user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = InsertUser_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end
SocialGraphServiceIface = __TObject:new{
  __type = 'SocialGraphServiceIface'
}


SocialGraphServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'SocialGraphServiceProcessor'
})

function SocialGraphServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function SocialGraphServiceProcessor:process_GetFollowers(seqid, iprot, oprot, server_ctx)
  local args = GetFollowers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetFollowers_result:new{}
  local status, res = pcall(self.handler.GetFollowers, self.handler, args.req_id, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetFollowers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SocialGraphServiceProcessor:process_GetFollowees(seqid, iprot, oprot, server_ctx)
  local args = GetFollowees_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetFollowees_result:new{}
  local status, res = pcall(self.handler.GetFollowees, self.handler, args.req_id, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetFollowees', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SocialGraphServiceProcessor:process_Follow(seqid, iprot, oprot, server_ctx)
  local args = Follow_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = Follow_result:new{}
  local status, res = pcall(self.handler.Follow, self.handler, args.req_id, args.user_id, args.followee_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('Follow', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SocialGraphServiceProcessor:process_Unfollow(seqid, iprot, oprot, server_ctx)
  local args = Unfollow_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = Unfollow_result:new{}
  local status, res = pcall(self.handler.Unfollow, self.handler, args.req_id, args.user_id, args.followee_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('Unfollow', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SocialGraphServiceProcessor:process_FollowWithUsername(seqid, iprot, oprot, server_ctx)
  local args = FollowWithUsername_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = FollowWithUsername_result:new{}
  local status, res = pcall(self.handler.FollowWithUsername, self.handler, args.req_id, args.user_usernmae, args.followee_username)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('FollowWithUsername', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SocialGraphServiceProcessor:process_UnfollowWithUsername(seqid, iprot, oprot, server_ctx)
  local args = UnfollowWithUsername_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UnfollowWithUsername_result:new{}
  local status, res = pcall(self.handler.UnfollowWithUsername, self.handler, args.req_id, args.user_usernmae, args.followee_username)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UnfollowWithUsername', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function SocialGraphServiceProcessor:process_InsertUser(seqid, iprot, oprot, server_ctx)
  local args = InsertUser_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = InsertUser_result:new{}
  local status, res = pcall(self.handler.InsertUser, self.handler, args.req_id, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('InsertUser', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

GetFollowers_args = __TObject:new{
  req_id,
  user_id
}

function GetFollowers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowers_args:write(oprot)
  oprot:writeStructBegin('GetFollowers_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowers_result = __TObject:new{
  success,
  se
}

function GetFollowers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype75, _size72 = iprot:readListBegin()
        for _i=1,_size72 do
          local _elem76 = iprot:readI64()
          table.insert(self.success, _elem76)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowers_result:write(oprot)
  oprot:writeStructBegin('GetFollowers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.I64, #self.success)
    for _,iter77 in ipairs(self.success) do
      oprot:writeI64(iter77)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowees_args = __TObject:new{
  req_id,
  user_id
}

function GetFollowees_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowees_args:write(oprot)
  oprot:writeStructBegin('GetFollowees_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowees_result = __TObject:new{
  success,
  se
}

function GetFollowees_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype81, _size78 = iprot:readListBegin()
        for _i=1,_size78 do
          local _elem82 = iprot:readI64()
          table.insert(self.success, _elem82)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowees_result:write(oprot)
  oprot:writeStructBegin('GetFollowees_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.I64, #self.success)
    for _,iter83 in ipairs(self.success) do
      oprot:writeI64(iter83)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Follow_args = __TObject:new{
  req_id,
  user_id,
  followee_id
}

function Follow_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Follow_args:write(oprot)
  oprot:writeStructBegin('Follow_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 3)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Follow_result = __TObject:new{
  se
}

function Follow_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Follow_result:write(oprot)
  oprot:writeStructBegin('Follow_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Unfollow_args = __TObject:new{
  req_id,
  user_id,
  followee_id
}

function Unfollow_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Unfollow_args:write(oprot)
  oprot:writeStructBegin('Unfollow_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 3)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Unfollow_result = __TObject:new{
  se
}

function Unfollow_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Unfollow_result:write(oprot)
  oprot:writeStructBegin('Unfollow_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FollowWithUsername_args = __TObject:new{
  req_id,
  user_usernmae,
  followee_username
}

function FollowWithUsername_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.user_usernmae = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.followee_username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FollowWithUsername_args:write(oprot)
  oprot:writeStructBegin('FollowWithUsername_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_usernmae ~= nil then
    oprot:writeFieldBegin('user_usernmae', TType.STRING, 2)
    oprot:writeString(self.user_usernmae)
    oprot:writeFieldEnd()
  end
  if self.followee_username ~= nil then
    oprot:writeFieldBegin('followee_username', TType.STRING, 3)
    oprot:writeString(self.followee_username)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FollowWithUsername_result = __TObject:new{
  se
}

function FollowWithUsername_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FollowWithUsername_result:write(oprot)
  oprot:writeStructBegin('FollowWithUsername_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UnfollowWithUsername_args = __TObject:new{
  req_id,
  user_usernmae,
  followee_username
}

function UnfollowWithUsername_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.user_usernmae = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.followee_username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UnfollowWithUsername_args:write(oprot)
  oprot:writeStructBegin('UnfollowWithUsername_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_usernmae ~= nil then
    oprot:writeFieldBegin('user_usernmae', TType.STRING, 2)
    oprot:writeString(self.user_usernmae)
    oprot:writeFieldEnd()
  end
  if self.followee_username ~= nil then
    oprot:writeFieldBegin('followee_username', TType.STRING, 3)
    oprot:writeString(self.followee_username)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UnfollowWithUsername_result = __TObject:new{
  se
}

function UnfollowWithUsername_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UnfollowWithUsername_result:write(oprot)
  oprot:writeStructBegin('UnfollowWithUsername_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InsertUser_args = __TObject:new{
  req_id,
  user_id
}

function InsertUser_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InsertUser_args:write(oprot)
  oprot:writeStructBegin('InsertUser_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

InsertUser_result = __TObject:new{
  se
}

function InsertUser_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function InsertUser_result:write(oprot)
  oprot:writeStructBegin('InsertUser_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end