--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--


local Thrift = require 'Thrift'
local TType = Thrift.TType
local TMessageType = Thrift.TMessageType
local __TObject = Thrift.__TObject
local TApplicationException = Thrift.TApplicationException
local __TClient = Thrift.__TClient
local __TProcessor = Thrift.__TProcessor
local ttype = Thrift.ttype
local ttable_size = Thrift.ttable_size
local social_network_ttypes = require 'social_network_ttypes'
local ServiceException = social_network_ttypes.ServiceException
local Post = social_network_ttypes.Post

ComposePostServiceClient = __TObject.new(__TClient, {
  __type = 'ComposePostServiceClient'
})

function ComposePostServiceClient:ComposePost(req_id, username, user_id, text, media_ids, media_types, post_type)
  self:send_ComposePost(req_id, username, user_id, text, media_ids, media_types, post_type)
  self:recv_ComposePost(req_id, username, user_id, text, media_ids, media_types, post_type)
end

function ComposePostServiceClient:send_ComposePost(req_id, username, user_id, text, media_ids, media_types, post_type)
  self.oprot:writeMessageBegin('ComposePost', TMessageType.CALL, self._seqid)
  local args = ComposePost_args:new{}
  args.req_id = req_id
  args.username = username
  args.user_id = user_id
  args.text = text
  args.media_ids = media_ids
  args.media_types = media_types
  args.post_type = post_type
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_ComposePost(req_id, username, user_id, text, media_ids, media_types, post_type)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ComposePost_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:StorePost(req_id, post)
  self:send_StorePost(req_id, post)
  self:recv_StorePost(req_id, post)
end

function ComposePostServiceClient:send_StorePost(req_id, post)
  self.oprot:writeMessageBegin('StorePost', TMessageType.CALL, self._seqid)
  local args = StorePost_args:new{}
  args.req_id = req_id
  args.post = post
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_StorePost(req_id, post)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = StorePost_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:ReadPost(req_id, post_id)
  self:send_ReadPost(req_id, post_id)
  return self:recv_ReadPost(req_id, post_id)
end

function ComposePostServiceClient:send_ReadPost(req_id, post_id)
  self.oprot:writeMessageBegin('ReadPost', TMessageType.CALL, self._seqid)
  local args = ReadPost_args:new{}
  args.req_id = req_id
  args.post_id = post_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_ReadPost(req_id, post_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadPost_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ComposePostServiceClient:ReadPosts(req_id, post_ids)
  self:send_ReadPosts(req_id, post_ids)
  return self:recv_ReadPosts(req_id, post_ids)
end

function ComposePostServiceClient:send_ReadPosts(req_id, post_ids)
  self.oprot:writeMessageBegin('ReadPosts', TMessageType.CALL, self._seqid)
  local args = ReadPosts_args:new{}
  args.req_id = req_id
  args.post_ids = post_ids
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_ReadPosts(req_id, post_ids)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadPosts_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ComposePostServiceClient:ReadUserTimeline(req_id, user_id, start, stop)
  self:send_ReadUserTimeline(req_id, user_id, start, stop)
  return self:recv_ReadUserTimeline(req_id, user_id, start, stop)
end

function ComposePostServiceClient:send_ReadUserTimeline(req_id, user_id, start, stop)
  self.oprot:writeMessageBegin('ReadUserTimeline', TMessageType.CALL, self._seqid)
  local args = ReadUserTimeline_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.start = start
  args.stop = stop
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_ReadUserTimeline(req_id, user_id, start, stop)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadUserTimeline_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ComposePostServiceClient:Login(req_id, username, password)
  self:send_Login(req_id, username, password)
  return self:recv_Login(req_id, username, password)
end

function ComposePostServiceClient:send_Login(req_id, username, password)
  self.oprot:writeMessageBegin('Login', TMessageType.CALL, self._seqid)
  local args = Login_args:new{}
  args.req_id = req_id
  args.username = username
  args.password = password
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_Login(req_id, username, password)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = Login_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ComposePostServiceClient:RegisterUser(req_id, first_name, last_name, username, password)
  self:send_RegisterUser(req_id, first_name, last_name, username, password)
  self:recv_RegisterUser(req_id, first_name, last_name, username, password)
end

function ComposePostServiceClient:send_RegisterUser(req_id, first_name, last_name, username, password)
  self.oprot:writeMessageBegin('RegisterUser', TMessageType.CALL, self._seqid)
  local args = RegisterUser_args:new{}
  args.req_id = req_id
  args.first_name = first_name
  args.last_name = last_name
  args.username = username
  args.password = password
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_RegisterUser(req_id, first_name, last_name, username, password)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = RegisterUser_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:RegisterUserWithId(req_id, first_name, last_name, username, password, user_id)
  self:send_RegisterUserWithId(req_id, first_name, last_name, username, password, user_id)
  self:recv_RegisterUserWithId(req_id, first_name, last_name, username, password, user_id)
end

function ComposePostServiceClient:send_RegisterUserWithId(req_id, first_name, last_name, username, password, user_id)
  self.oprot:writeMessageBegin('RegisterUserWithId', TMessageType.CALL, self._seqid)
  local args = RegisterUserWithId_args:new{}
  args.req_id = req_id
  args.first_name = first_name
  args.last_name = last_name
  args.username = username
  args.password = password
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_RegisterUserWithId(req_id, first_name, last_name, username, password, user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = RegisterUserWithId_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:GetFollowers(req_id, user_id)
  self:send_GetFollowers(req_id, user_id)
  return self:recv_GetFollowers(req_id, user_id)
end

function ComposePostServiceClient:send_GetFollowers(req_id, user_id)
  self.oprot:writeMessageBegin('GetFollowers', TMessageType.CALL, self._seqid)
  local args = GetFollowers_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_GetFollowers(req_id, user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetFollowers_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ComposePostServiceClient:Unfollow(req_id, user_id, followee_id)
  self:send_Unfollow(req_id, user_id, followee_id)
  self:recv_Unfollow(req_id, user_id, followee_id)
end

function ComposePostServiceClient:send_Unfollow(req_id, user_id, followee_id)
  self.oprot:writeMessageBegin('Unfollow', TMessageType.CALL, self._seqid)
  local args = Unfollow_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.followee_id = followee_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_Unfollow(req_id, user_id, followee_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = Unfollow_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:UnfollowWithUsername(req_id, user_usernmae, followee_username)
  self:send_UnfollowWithUsername(req_id, user_usernmae, followee_username)
  self:recv_UnfollowWithUsername(req_id, user_usernmae, followee_username)
end

function ComposePostServiceClient:send_UnfollowWithUsername(req_id, user_usernmae, followee_username)
  self.oprot:writeMessageBegin('UnfollowWithUsername', TMessageType.CALL, self._seqid)
  local args = UnfollowWithUsername_args:new{}
  args.req_id = req_id
  args.user_usernmae = user_usernmae
  args.followee_username = followee_username
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_UnfollowWithUsername(req_id, user_usernmae, followee_username)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = UnfollowWithUsername_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:Follow(req_id, user_id, followee_id)
  self:send_Follow(req_id, user_id, followee_id)
  self:recv_Follow(req_id, user_id, followee_id)
end

function ComposePostServiceClient:send_Follow(req_id, user_id, followee_id)
  self.oprot:writeMessageBegin('Follow', TMessageType.CALL, self._seqid)
  local args = Follow_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.followee_id = followee_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_Follow(req_id, user_id, followee_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = Follow_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:FollowWithUsername(req_id, user_usernmae, followee_username)
  self:send_FollowWithUsername(req_id, user_usernmae, followee_username)
  self:recv_FollowWithUsername(req_id, user_usernmae, followee_username)
end

function ComposePostServiceClient:send_FollowWithUsername(req_id, user_usernmae, followee_username)
  self.oprot:writeMessageBegin('FollowWithUsername', TMessageType.CALL, self._seqid)
  local args = FollowWithUsername_args:new{}
  args.req_id = req_id
  args.user_usernmae = user_usernmae
  args.followee_username = followee_username
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_FollowWithUsername(req_id, user_usernmae, followee_username)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = FollowWithUsername_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function ComposePostServiceClient:GetFollowees(req_id, user_id)
  self:send_GetFollowees(req_id, user_id)
  return self:recv_GetFollowees(req_id, user_id)
end

function ComposePostServiceClient:send_GetFollowees(req_id, user_id)
  self.oprot:writeMessageBegin('GetFollowees', TMessageType.CALL, self._seqid)
  local args = GetFollowees_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_GetFollowees(req_id, user_id)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = GetFollowees_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function ComposePostServiceClient:ReadHomeTimeline(req_id, user_id, start, stop)
  self:send_ReadHomeTimeline(req_id, user_id, start, stop)
  return self:recv_ReadHomeTimeline(req_id, user_id, start, stop)
end

function ComposePostServiceClient:send_ReadHomeTimeline(req_id, user_id, start, stop)
  self.oprot:writeMessageBegin('ReadHomeTimeline', TMessageType.CALL, self._seqid)
  local args = ReadHomeTimeline_args:new{}
  args.req_id = req_id
  args.user_id = user_id
  args.start = start
  args.stop = stop
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function ComposePostServiceClient:recv_ReadHomeTimeline(req_id, user_id, start, stop)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = ReadHomeTimeline_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success ~= nil then
    return result.success
  elseif result.se then
    error(result.se)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
ComposePostServiceIface = __TObject:new{
  __type = 'ComposePostServiceIface'
}


ComposePostServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'ComposePostServiceProcessor'
})

function ComposePostServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function ComposePostServiceProcessor:process_ComposePost(seqid, iprot, oprot, server_ctx)
  local args = ComposePost_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ComposePost_result:new{}
  local status, res = pcall(self.handler.ComposePost, self.handler, args.req_id, args.username, args.user_id, args.text, args.media_ids, args.media_types, args.post_type)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ComposePost', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_StorePost(seqid, iprot, oprot, server_ctx)
  local args = StorePost_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = StorePost_result:new{}
  local status, res = pcall(self.handler.StorePost, self.handler, args.req_id, args.post)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('StorePost', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_ReadPost(seqid, iprot, oprot, server_ctx)
  local args = ReadPost_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadPost_result:new{}
  local status, res = pcall(self.handler.ReadPost, self.handler, args.req_id, args.post_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadPost', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_ReadPosts(seqid, iprot, oprot, server_ctx)
  local args = ReadPosts_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadPosts_result:new{}
  local status, res = pcall(self.handler.ReadPosts, self.handler, args.req_id, args.post_ids)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadPosts', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_ReadUserTimeline(seqid, iprot, oprot, server_ctx)
  local args = ReadUserTimeline_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadUserTimeline_result:new{}
  local status, res = pcall(self.handler.ReadUserTimeline, self.handler, args.req_id, args.user_id, args.start, args.stop)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadUserTimeline', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_Login(seqid, iprot, oprot, server_ctx)
  local args = Login_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = Login_result:new{}
  local status, res = pcall(self.handler.Login, self.handler, args.req_id, args.username, args.password)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('Login', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_RegisterUser(seqid, iprot, oprot, server_ctx)
  local args = RegisterUser_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = RegisterUser_result:new{}
  local status, res = pcall(self.handler.RegisterUser, self.handler, args.req_id, args.first_name, args.last_name, args.username, args.password)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('RegisterUser', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_RegisterUserWithId(seqid, iprot, oprot, server_ctx)
  local args = RegisterUserWithId_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = RegisterUserWithId_result:new{}
  local status, res = pcall(self.handler.RegisterUserWithId, self.handler, args.req_id, args.first_name, args.last_name, args.username, args.password, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('RegisterUserWithId', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_GetFollowers(seqid, iprot, oprot, server_ctx)
  local args = GetFollowers_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetFollowers_result:new{}
  local status, res = pcall(self.handler.GetFollowers, self.handler, args.req_id, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetFollowers', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_Unfollow(seqid, iprot, oprot, server_ctx)
  local args = Unfollow_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = Unfollow_result:new{}
  local status, res = pcall(self.handler.Unfollow, self.handler, args.req_id, args.user_id, args.followee_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('Unfollow', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_UnfollowWithUsername(seqid, iprot, oprot, server_ctx)
  local args = UnfollowWithUsername_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = UnfollowWithUsername_result:new{}
  local status, res = pcall(self.handler.UnfollowWithUsername, self.handler, args.req_id, args.user_usernmae, args.followee_username)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('UnfollowWithUsername', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_Follow(seqid, iprot, oprot, server_ctx)
  local args = Follow_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = Follow_result:new{}
  local status, res = pcall(self.handler.Follow, self.handler, args.req_id, args.user_id, args.followee_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('Follow', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_FollowWithUsername(seqid, iprot, oprot, server_ctx)
  local args = FollowWithUsername_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = FollowWithUsername_result:new{}
  local status, res = pcall(self.handler.FollowWithUsername, self.handler, args.req_id, args.user_usernmae, args.followee_username)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('FollowWithUsername', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_GetFollowees(seqid, iprot, oprot, server_ctx)
  local args = GetFollowees_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = GetFollowees_result:new{}
  local status, res = pcall(self.handler.GetFollowees, self.handler, args.req_id, args.user_id)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('GetFollowees', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function ComposePostServiceProcessor:process_ReadHomeTimeline(seqid, iprot, oprot, server_ctx)
  local args = ReadHomeTimeline_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = ReadHomeTimeline_result:new{}
  local status, res = pcall(self.handler.ReadHomeTimeline, self.handler, args.req_id, args.user_id, args.start, args.stop)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'ServiceException' then
    result.se = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('ReadHomeTimeline', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

ComposePost_args = __TObject:new{
  req_id,
  username,
  user_id,
  text,
  media_ids,
  media_types,
  post_type
}

function ComposePost_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.text = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.LIST then
        self.media_ids = {}
        local _etype33, _size30 = iprot:readListBegin()
        for _i=1,_size30 do
          local _elem34 = iprot:readI64()
          table.insert(self.media_ids, _elem34)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.LIST then
        self.media_types = {}
        local _etype38, _size35 = iprot:readListBegin()
        for _i=1,_size35 do
          local _elem39 = iprot:readString()
          table.insert(self.media_types, _elem39)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 7 then
      if ftype == TType.I32 then
        self.post_type = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ComposePost_args:write(oprot)
  oprot:writeStructBegin('ComposePost_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.username ~= nil then
    oprot:writeFieldBegin('username', TType.STRING, 2)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 3)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.text ~= nil then
    oprot:writeFieldBegin('text', TType.STRING, 4)
    oprot:writeString(self.text)
    oprot:writeFieldEnd()
  end
  if self.media_ids ~= nil then
    oprot:writeFieldBegin('media_ids', TType.LIST, 5)
    oprot:writeListBegin(TType.I64, #self.media_ids)
    for _,iter40 in ipairs(self.media_ids) do
      oprot:writeI64(iter40)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.media_types ~= nil then
    oprot:writeFieldBegin('media_types', TType.LIST, 6)
    oprot:writeListBegin(TType.STRING, #self.media_types)
    for _,iter41 in ipairs(self.media_types) do
      oprot:writeString(iter41)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.post_type ~= nil then
    oprot:writeFieldBegin('post_type', TType.I32, 7)
    oprot:writeI32(self.post_type)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ComposePost_result = __TObject:new{
  se
}

function ComposePost_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ComposePost_result:write(oprot)
  oprot:writeStructBegin('ComposePost_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StorePost_args = __TObject:new{
  req_id,
  post
}

function StorePost_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.post = Post:new{}
        self.post:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StorePost_args:write(oprot)
  oprot:writeStructBegin('StorePost_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.post ~= nil then
    oprot:writeFieldBegin('post', TType.STRUCT, 2)
    self.post:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

StorePost_result = __TObject:new{
  se
}

function StorePost_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function StorePost_result:write(oprot)
  oprot:writeStructBegin('StorePost_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadPost_args = __TObject:new{
  req_id,
  post_id
}

function ReadPost_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.post_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadPost_args:write(oprot)
  oprot:writeStructBegin('ReadPost_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.post_id ~= nil then
    oprot:writeFieldBegin('post_id', TType.I64, 2)
    oprot:writeI64(self.post_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadPost_result = __TObject:new{
  success,
  se
}

function ReadPost_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = Post:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadPost_result:write(oprot)
  oprot:writeStructBegin('ReadPost_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadPosts_args = __TObject:new{
  req_id,
  post_ids
}

function ReadPosts_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.post_ids = {}
        local _etype45, _size42 = iprot:readListBegin()
        for _i=1,_size42 do
          local _elem46 = iprot:readI64()
          table.insert(self.post_ids, _elem46)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadPosts_args:write(oprot)
  oprot:writeStructBegin('ReadPosts_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.post_ids ~= nil then
    oprot:writeFieldBegin('post_ids', TType.LIST, 2)
    oprot:writeListBegin(TType.I64, #self.post_ids)
    for _,iter47 in ipairs(self.post_ids) do
      oprot:writeI64(iter47)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadPosts_result = __TObject:new{
  success,
  se
}

function ReadPosts_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype51, _size48 = iprot:readListBegin()
        for _i=1,_size48 do
          local _elem52 = Post:new{}
          _elem52:read(iprot)
          table.insert(self.success, _elem52)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadPosts_result:write(oprot)
  oprot:writeStructBegin('ReadPosts_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter53 in ipairs(self.success) do
      iter53:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadUserTimeline_args = __TObject:new{
  req_id,
  user_id,
  start,
  stop
}

function ReadUserTimeline_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.start = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.stop = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadUserTimeline_args:write(oprot)
  oprot:writeStructBegin('ReadUserTimeline_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.start ~= nil then
    oprot:writeFieldBegin('start', TType.I32, 3)
    oprot:writeI32(self.start)
    oprot:writeFieldEnd()
  end
  if self.stop ~= nil then
    oprot:writeFieldBegin('stop', TType.I32, 4)
    oprot:writeI32(self.stop)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadUserTimeline_result = __TObject:new{
  success,
  se
}

function ReadUserTimeline_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype57, _size54 = iprot:readListBegin()
        for _i=1,_size54 do
          local _elem58 = Post:new{}
          _elem58:read(iprot)
          table.insert(self.success, _elem58)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadUserTimeline_result:write(oprot)
  oprot:writeStructBegin('ReadUserTimeline_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter59 in ipairs(self.success) do
      iter59:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Login_args = __TObject:new{
  req_id,
  username,
  password
}

function Login_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Login_args:write(oprot)
  oprot:writeStructBegin('Login_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.username ~= nil then
    oprot:writeFieldBegin('username', TType.STRING, 2)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 3)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Login_result = __TObject:new{
  success,
  se
}

function Login_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRING then
        self.success = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Login_result:write(oprot)
  oprot:writeStructBegin('Login_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.STRING, 0)
    oprot:writeString(self.success)
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterUser_args = __TObject:new{
  req_id,
  first_name,
  last_name,
  username,
  password
}

function RegisterUser_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.first_name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.last_name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterUser_args:write(oprot)
  oprot:writeStructBegin('RegisterUser_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.first_name ~= nil then
    oprot:writeFieldBegin('first_name', TType.STRING, 2)
    oprot:writeString(self.first_name)
    oprot:writeFieldEnd()
  end
  if self.last_name ~= nil then
    oprot:writeFieldBegin('last_name', TType.STRING, 3)
    oprot:writeString(self.last_name)
    oprot:writeFieldEnd()
  end
  if self.username ~= nil then
    oprot:writeFieldBegin('username', TType.STRING, 4)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 5)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterUser_result = __TObject:new{
  se
}

function RegisterUser_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterUser_result:write(oprot)
  oprot:writeStructBegin('RegisterUser_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterUserWithId_args = __TObject:new{
  req_id,
  first_name,
  last_name,
  username,
  password,
  user_id
}

function RegisterUserWithId_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.first_name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.last_name = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.password = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterUserWithId_args:write(oprot)
  oprot:writeStructBegin('RegisterUserWithId_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.first_name ~= nil then
    oprot:writeFieldBegin('first_name', TType.STRING, 2)
    oprot:writeString(self.first_name)
    oprot:writeFieldEnd()
  end
  if self.last_name ~= nil then
    oprot:writeFieldBegin('last_name', TType.STRING, 3)
    oprot:writeString(self.last_name)
    oprot:writeFieldEnd()
  end
  if self.username ~= nil then
    oprot:writeFieldBegin('username', TType.STRING, 4)
    oprot:writeString(self.username)
    oprot:writeFieldEnd()
  end
  if self.password ~= nil then
    oprot:writeFieldBegin('password', TType.STRING, 5)
    oprot:writeString(self.password)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 6)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

RegisterUserWithId_result = __TObject:new{
  se
}

function RegisterUserWithId_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function RegisterUserWithId_result:write(oprot)
  oprot:writeStructBegin('RegisterUserWithId_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowers_args = __TObject:new{
  req_id,
  user_id
}

function GetFollowers_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowers_args:write(oprot)
  oprot:writeStructBegin('GetFollowers_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowers_result = __TObject:new{
  success,
  se
}

function GetFollowers_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype63, _size60 = iprot:readListBegin()
        for _i=1,_size60 do
          local _elem64 = iprot:readI64()
          table.insert(self.success, _elem64)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowers_result:write(oprot)
  oprot:writeStructBegin('GetFollowers_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.I64, #self.success)
    for _,iter65 in ipairs(self.success) do
      oprot:writeI64(iter65)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Unfollow_args = __TObject:new{
  req_id,
  user_id,
  followee_id
}

function Unfollow_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Unfollow_args:write(oprot)
  oprot:writeStructBegin('Unfollow_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 3)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Unfollow_result = __TObject:new{
  se
}

function Unfollow_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Unfollow_result:write(oprot)
  oprot:writeStructBegin('Unfollow_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UnfollowWithUsername_args = __TObject:new{
  req_id,
  user_usernmae,
  followee_username
}

function UnfollowWithUsername_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.user_usernmae = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.followee_username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UnfollowWithUsername_args:write(oprot)
  oprot:writeStructBegin('UnfollowWithUsername_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_usernmae ~= nil then
    oprot:writeFieldBegin('user_usernmae', TType.STRING, 2)
    oprot:writeString(self.user_usernmae)
    oprot:writeFieldEnd()
  end
  if self.followee_username ~= nil then
    oprot:writeFieldBegin('followee_username', TType.STRING, 3)
    oprot:writeString(self.followee_username)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

UnfollowWithUsername_result = __TObject:new{
  se
}

function UnfollowWithUsername_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function UnfollowWithUsername_result:write(oprot)
  oprot:writeStructBegin('UnfollowWithUsername_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Follow_args = __TObject:new{
  req_id,
  user_id,
  followee_id
}

function Follow_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I64 then
        self.followee_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Follow_args:write(oprot)
  oprot:writeStructBegin('Follow_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.followee_id ~= nil then
    oprot:writeFieldBegin('followee_id', TType.I64, 3)
    oprot:writeI64(self.followee_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

Follow_result = __TObject:new{
  se
}

function Follow_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function Follow_result:write(oprot)
  oprot:writeStructBegin('Follow_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FollowWithUsername_args = __TObject:new{
  req_id,
  user_usernmae,
  followee_username
}

function FollowWithUsername_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.user_usernmae = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.followee_username = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FollowWithUsername_args:write(oprot)
  oprot:writeStructBegin('FollowWithUsername_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_usernmae ~= nil then
    oprot:writeFieldBegin('user_usernmae', TType.STRING, 2)
    oprot:writeString(self.user_usernmae)
    oprot:writeFieldEnd()
  end
  if self.followee_username ~= nil then
    oprot:writeFieldBegin('followee_username', TType.STRING, 3)
    oprot:writeString(self.followee_username)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

FollowWithUsername_result = __TObject:new{
  se
}

function FollowWithUsername_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function FollowWithUsername_result:write(oprot)
  oprot:writeStructBegin('FollowWithUsername_result')
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowees_args = __TObject:new{
  req_id,
  user_id
}

function GetFollowees_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowees_args:write(oprot)
  oprot:writeStructBegin('GetFollowees_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

GetFollowees_result = __TObject:new{
  success,
  se
}

function GetFollowees_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype69, _size66 = iprot:readListBegin()
        for _i=1,_size66 do
          local _elem70 = iprot:readI64()
          table.insert(self.success, _elem70)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function GetFollowees_result:write(oprot)
  oprot:writeStructBegin('GetFollowees_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.I64, #self.success)
    for _,iter71 in ipairs(self.success) do
      oprot:writeI64(iter71)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadHomeTimeline_args = __TObject:new{
  req_id,
  user_id,
  start,
  stop
}

function ReadHomeTimeline_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I64 then
        self.req_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I64 then
        self.user_id = iprot:readI64()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.start = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.I32 then
        self.stop = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadHomeTimeline_args:write(oprot)
  oprot:writeStructBegin('ReadHomeTimeline_args')
  if self.req_id ~= nil then
    oprot:writeFieldBegin('req_id', TType.I64, 1)
    oprot:writeI64(self.req_id)
    oprot:writeFieldEnd()
  end
  if self.user_id ~= nil then
    oprot:writeFieldBegin('user_id', TType.I64, 2)
    oprot:writeI64(self.user_id)
    oprot:writeFieldEnd()
  end
  if self.start ~= nil then
    oprot:writeFieldBegin('start', TType.I32, 3)
    oprot:writeI32(self.start)
    oprot:writeFieldEnd()
  end
  if self.stop ~= nil then
    oprot:writeFieldBegin('stop', TType.I32, 4)
    oprot:writeI32(self.stop)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

ReadHomeTimeline_result = __TObject:new{
  success,
  se
}

function ReadHomeTimeline_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype75, _size72 = iprot:readListBegin()
        for _i=1,_size72 do
          local _elem76 = Post:new{}
          _elem76:read(iprot)
          table.insert(self.success, _elem76)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.se = ServiceException:new{}
        self.se:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function ReadHomeTimeline_result:write(oprot)
  oprot:writeStructBegin('ReadHomeTimeline_result')
  if self.success ~= nil then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, #self.success)
    for _,iter77 in ipairs(self.success) do
      iter77:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.se ~= nil then
    oprot:writeFieldBegin('se', TType.STRUCT, 1)
    self.se:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

return {
  ComposePostServiceClient = ComposePostServiceClient
}