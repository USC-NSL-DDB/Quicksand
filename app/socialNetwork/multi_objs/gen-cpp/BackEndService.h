/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackEndService_H
#define BackEndService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "social_network_types.h"

namespace social_network {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class BackEndServiceIf {
 public:
  virtual ~BackEndServiceIf() {}
  virtual void ComposePost(const std::string& username, const int64_t user_id, const std::string& text, const std::vector<int64_t> & media_ids, const std::vector<std::string> & media_types, const PostType::type post_type) = 0;
  virtual void ReadUserTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop) = 0;
  virtual void Login(std::string& _return, const std::string& username, const std::string& password) = 0;
  virtual void RegisterUser(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password) = 0;
  virtual void RegisterUserWithId(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id) = 0;
  virtual void GetFollowers(std::vector<int64_t> & _return, const int64_t user_id) = 0;
  virtual void Unfollow(const int64_t user_id, const int64_t followee_id) = 0;
  virtual void UnfollowWithUsername(const std::string& user_usernmae, const std::string& followee_username) = 0;
  virtual void Follow(const int64_t user_id, const int64_t followee_id) = 0;
  virtual void FollowWithUsername(const std::string& user_usernmae, const std::string& followee_username) = 0;
  virtual void GetFollowees(std::vector<int64_t> & _return, const int64_t user_id) = 0;
  virtual void ReadHomeTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop) = 0;
  virtual void UploadMedia(const std::string& filename, const std::string& data) = 0;
  virtual void GetMedia(std::string& _return, const std::string& filename) = 0;
  virtual void RemovePosts(const int64_t user_id, const int32_t start, const int32_t stop) = 0;
};

class BackEndServiceIfFactory {
 public:
  typedef BackEndServiceIf Handler;

  virtual ~BackEndServiceIfFactory() {}

  virtual BackEndServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BackEndServiceIf* /* handler */) = 0;
};

class BackEndServiceIfSingletonFactory : virtual public BackEndServiceIfFactory {
 public:
  BackEndServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<BackEndServiceIf>& iface) : iface_(iface) {}
  virtual ~BackEndServiceIfSingletonFactory() {}

  virtual BackEndServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BackEndServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<BackEndServiceIf> iface_;
};

class BackEndServiceNull : virtual public BackEndServiceIf {
 public:
  virtual ~BackEndServiceNull() {}
  void ComposePost(const std::string& /* username */, const int64_t /* user_id */, const std::string& /* text */, const std::vector<int64_t> & /* media_ids */, const std::vector<std::string> & /* media_types */, const PostType::type /* post_type */) {
    return;
  }
  void ReadUserTimeline(std::vector<Post> & /* _return */, const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */) {
    return;
  }
  void Login(std::string& /* _return */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void RegisterUser(const std::string& /* first_name */, const std::string& /* last_name */, const std::string& /* username */, const std::string& /* password */) {
    return;
  }
  void RegisterUserWithId(const std::string& /* first_name */, const std::string& /* last_name */, const std::string& /* username */, const std::string& /* password */, const int64_t /* user_id */) {
    return;
  }
  void GetFollowers(std::vector<int64_t> & /* _return */, const int64_t /* user_id */) {
    return;
  }
  void Unfollow(const int64_t /* user_id */, const int64_t /* followee_id */) {
    return;
  }
  void UnfollowWithUsername(const std::string& /* user_usernmae */, const std::string& /* followee_username */) {
    return;
  }
  void Follow(const int64_t /* user_id */, const int64_t /* followee_id */) {
    return;
  }
  void FollowWithUsername(const std::string& /* user_usernmae */, const std::string& /* followee_username */) {
    return;
  }
  void GetFollowees(std::vector<int64_t> & /* _return */, const int64_t /* user_id */) {
    return;
  }
  void ReadHomeTimeline(std::vector<Post> & /* _return */, const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */) {
    return;
  }
  void UploadMedia(const std::string& /* filename */, const std::string& /* data */) {
    return;
  }
  void GetMedia(std::string& /* _return */, const std::string& /* filename */) {
    return;
  }
  void RemovePosts(const int64_t /* user_id */, const int32_t /* start */, const int32_t /* stop */) {
    return;
  }
};

typedef struct _BackEndService_ComposePost_args__isset {
  _BackEndService_ComposePost_args__isset() : username(false), user_id(false), text(false), media_ids(false), media_types(false), post_type(false) {}
  bool username :1;
  bool user_id :1;
  bool text :1;
  bool media_ids :1;
  bool media_types :1;
  bool post_type :1;
} _BackEndService_ComposePost_args__isset;

class BackEndService_ComposePost_args {
 public:

  BackEndService_ComposePost_args(const BackEndService_ComposePost_args&);
  BackEndService_ComposePost_args& operator=(const BackEndService_ComposePost_args&);
  BackEndService_ComposePost_args() : username(), user_id(0), text(), post_type((PostType::type)0) {
  }

  virtual ~BackEndService_ComposePost_args() throw();
  std::string username;
  int64_t user_id;
  std::string text;
  std::vector<int64_t>  media_ids;
  std::vector<std::string>  media_types;
  PostType::type post_type;

  _BackEndService_ComposePost_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_user_id(const int64_t val);

  void __set_text(const std::string& val);

  void __set_media_ids(const std::vector<int64_t> & val);

  void __set_media_types(const std::vector<std::string> & val);

  void __set_post_type(const PostType::type val);

  bool operator == (const BackEndService_ComposePost_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    if (!(text == rhs.text))
      return false;
    if (!(media_ids == rhs.media_ids))
      return false;
    if (!(media_types == rhs.media_types))
      return false;
    if (!(post_type == rhs.post_type))
      return false;
    return true;
  }
  bool operator != (const BackEndService_ComposePost_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_ComposePost_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_ComposePost_pargs {
 public:


  virtual ~BackEndService_ComposePost_pargs() throw();
  const std::string* username;
  const int64_t* user_id;
  const std::string* text;
  const std::vector<int64_t> * media_ids;
  const std::vector<std::string> * media_types;
  const PostType::type* post_type;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_ComposePost_result__isset {
  _BackEndService_ComposePost_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_ComposePost_result__isset;

class BackEndService_ComposePost_result {
 public:

  BackEndService_ComposePost_result(const BackEndService_ComposePost_result&);
  BackEndService_ComposePost_result& operator=(const BackEndService_ComposePost_result&);
  BackEndService_ComposePost_result() {
  }

  virtual ~BackEndService_ComposePost_result() throw();
  ServiceException se;

  _BackEndService_ComposePost_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_ComposePost_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_ComposePost_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_ComposePost_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_ComposePost_presult__isset {
  _BackEndService_ComposePost_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_ComposePost_presult__isset;

class BackEndService_ComposePost_presult {
 public:


  virtual ~BackEndService_ComposePost_presult() throw();
  ServiceException se;

  _BackEndService_ComposePost_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_ReadUserTimeline_args__isset {
  _BackEndService_ReadUserTimeline_args__isset() : user_id(false), start(false), stop(false) {}
  bool user_id :1;
  bool start :1;
  bool stop :1;
} _BackEndService_ReadUserTimeline_args__isset;

class BackEndService_ReadUserTimeline_args {
 public:

  BackEndService_ReadUserTimeline_args(const BackEndService_ReadUserTimeline_args&);
  BackEndService_ReadUserTimeline_args& operator=(const BackEndService_ReadUserTimeline_args&);
  BackEndService_ReadUserTimeline_args() : user_id(0), start(0), stop(0) {
  }

  virtual ~BackEndService_ReadUserTimeline_args() throw();
  int64_t user_id;
  int32_t start;
  int32_t stop;

  _BackEndService_ReadUserTimeline_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  bool operator == (const BackEndService_ReadUserTimeline_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    return true;
  }
  bool operator != (const BackEndService_ReadUserTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_ReadUserTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_ReadUserTimeline_pargs {
 public:


  virtual ~BackEndService_ReadUserTimeline_pargs() throw();
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_ReadUserTimeline_result__isset {
  _BackEndService_ReadUserTimeline_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_ReadUserTimeline_result__isset;

class BackEndService_ReadUserTimeline_result {
 public:

  BackEndService_ReadUserTimeline_result(const BackEndService_ReadUserTimeline_result&);
  BackEndService_ReadUserTimeline_result& operator=(const BackEndService_ReadUserTimeline_result&);
  BackEndService_ReadUserTimeline_result() {
  }

  virtual ~BackEndService_ReadUserTimeline_result() throw();
  std::vector<Post>  success;
  ServiceException se;

  _BackEndService_ReadUserTimeline_result__isset __isset;

  void __set_success(const std::vector<Post> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_ReadUserTimeline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_ReadUserTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_ReadUserTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_ReadUserTimeline_presult__isset {
  _BackEndService_ReadUserTimeline_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_ReadUserTimeline_presult__isset;

class BackEndService_ReadUserTimeline_presult {
 public:


  virtual ~BackEndService_ReadUserTimeline_presult() throw();
  std::vector<Post> * success;
  ServiceException se;

  _BackEndService_ReadUserTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_Login_args__isset {
  _BackEndService_Login_args__isset() : username(false), password(false) {}
  bool username :1;
  bool password :1;
} _BackEndService_Login_args__isset;

class BackEndService_Login_args {
 public:

  BackEndService_Login_args(const BackEndService_Login_args&);
  BackEndService_Login_args& operator=(const BackEndService_Login_args&);
  BackEndService_Login_args() : username(), password() {
  }

  virtual ~BackEndService_Login_args() throw();
  std::string username;
  std::string password;

  _BackEndService_Login_args__isset __isset;

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const BackEndService_Login_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const BackEndService_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_Login_pargs {
 public:


  virtual ~BackEndService_Login_pargs() throw();
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_Login_result__isset {
  _BackEndService_Login_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_Login_result__isset;

class BackEndService_Login_result {
 public:

  BackEndService_Login_result(const BackEndService_Login_result&);
  BackEndService_Login_result& operator=(const BackEndService_Login_result&);
  BackEndService_Login_result() : success() {
  }

  virtual ~BackEndService_Login_result() throw();
  std::string success;
  ServiceException se;

  _BackEndService_Login_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_Login_presult__isset {
  _BackEndService_Login_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_Login_presult__isset;

class BackEndService_Login_presult {
 public:


  virtual ~BackEndService_Login_presult() throw();
  std::string* success;
  ServiceException se;

  _BackEndService_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_RegisterUser_args__isset {
  _BackEndService_RegisterUser_args__isset() : first_name(false), last_name(false), username(false), password(false) {}
  bool first_name :1;
  bool last_name :1;
  bool username :1;
  bool password :1;
} _BackEndService_RegisterUser_args__isset;

class BackEndService_RegisterUser_args {
 public:

  BackEndService_RegisterUser_args(const BackEndService_RegisterUser_args&);
  BackEndService_RegisterUser_args& operator=(const BackEndService_RegisterUser_args&);
  BackEndService_RegisterUser_args() : first_name(), last_name(), username(), password() {
  }

  virtual ~BackEndService_RegisterUser_args() throw();
  std::string first_name;
  std::string last_name;
  std::string username;
  std::string password;

  _BackEndService_RegisterUser_args__isset __isset;

  void __set_first_name(const std::string& val);

  void __set_last_name(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const BackEndService_RegisterUser_args & rhs) const
  {
    if (!(first_name == rhs.first_name))
      return false;
    if (!(last_name == rhs.last_name))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const BackEndService_RegisterUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_RegisterUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_RegisterUser_pargs {
 public:


  virtual ~BackEndService_RegisterUser_pargs() throw();
  const std::string* first_name;
  const std::string* last_name;
  const std::string* username;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_RegisterUser_result__isset {
  _BackEndService_RegisterUser_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_RegisterUser_result__isset;

class BackEndService_RegisterUser_result {
 public:

  BackEndService_RegisterUser_result(const BackEndService_RegisterUser_result&);
  BackEndService_RegisterUser_result& operator=(const BackEndService_RegisterUser_result&);
  BackEndService_RegisterUser_result() {
  }

  virtual ~BackEndService_RegisterUser_result() throw();
  ServiceException se;

  _BackEndService_RegisterUser_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_RegisterUser_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_RegisterUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_RegisterUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_RegisterUser_presult__isset {
  _BackEndService_RegisterUser_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_RegisterUser_presult__isset;

class BackEndService_RegisterUser_presult {
 public:


  virtual ~BackEndService_RegisterUser_presult() throw();
  ServiceException se;

  _BackEndService_RegisterUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_RegisterUserWithId_args__isset {
  _BackEndService_RegisterUserWithId_args__isset() : first_name(false), last_name(false), username(false), password(false), user_id(false) {}
  bool first_name :1;
  bool last_name :1;
  bool username :1;
  bool password :1;
  bool user_id :1;
} _BackEndService_RegisterUserWithId_args__isset;

class BackEndService_RegisterUserWithId_args {
 public:

  BackEndService_RegisterUserWithId_args(const BackEndService_RegisterUserWithId_args&);
  BackEndService_RegisterUserWithId_args& operator=(const BackEndService_RegisterUserWithId_args&);
  BackEndService_RegisterUserWithId_args() : first_name(), last_name(), username(), password(), user_id(0) {
  }

  virtual ~BackEndService_RegisterUserWithId_args() throw();
  std::string first_name;
  std::string last_name;
  std::string username;
  std::string password;
  int64_t user_id;

  _BackEndService_RegisterUserWithId_args__isset __isset;

  void __set_first_name(const std::string& val);

  void __set_last_name(const std::string& val);

  void __set_username(const std::string& val);

  void __set_password(const std::string& val);

  void __set_user_id(const int64_t val);

  bool operator == (const BackEndService_RegisterUserWithId_args & rhs) const
  {
    if (!(first_name == rhs.first_name))
      return false;
    if (!(last_name == rhs.last_name))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const BackEndService_RegisterUserWithId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_RegisterUserWithId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_RegisterUserWithId_pargs {
 public:


  virtual ~BackEndService_RegisterUserWithId_pargs() throw();
  const std::string* first_name;
  const std::string* last_name;
  const std::string* username;
  const std::string* password;
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_RegisterUserWithId_result__isset {
  _BackEndService_RegisterUserWithId_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_RegisterUserWithId_result__isset;

class BackEndService_RegisterUserWithId_result {
 public:

  BackEndService_RegisterUserWithId_result(const BackEndService_RegisterUserWithId_result&);
  BackEndService_RegisterUserWithId_result& operator=(const BackEndService_RegisterUserWithId_result&);
  BackEndService_RegisterUserWithId_result() {
  }

  virtual ~BackEndService_RegisterUserWithId_result() throw();
  ServiceException se;

  _BackEndService_RegisterUserWithId_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_RegisterUserWithId_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_RegisterUserWithId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_RegisterUserWithId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_RegisterUserWithId_presult__isset {
  _BackEndService_RegisterUserWithId_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_RegisterUserWithId_presult__isset;

class BackEndService_RegisterUserWithId_presult {
 public:


  virtual ~BackEndService_RegisterUserWithId_presult() throw();
  ServiceException se;

  _BackEndService_RegisterUserWithId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_GetFollowers_args__isset {
  _BackEndService_GetFollowers_args__isset() : user_id(false) {}
  bool user_id :1;
} _BackEndService_GetFollowers_args__isset;

class BackEndService_GetFollowers_args {
 public:

  BackEndService_GetFollowers_args(const BackEndService_GetFollowers_args&);
  BackEndService_GetFollowers_args& operator=(const BackEndService_GetFollowers_args&);
  BackEndService_GetFollowers_args() : user_id(0) {
  }

  virtual ~BackEndService_GetFollowers_args() throw();
  int64_t user_id;

  _BackEndService_GetFollowers_args__isset __isset;

  void __set_user_id(const int64_t val);

  bool operator == (const BackEndService_GetFollowers_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const BackEndService_GetFollowers_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_GetFollowers_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_GetFollowers_pargs {
 public:


  virtual ~BackEndService_GetFollowers_pargs() throw();
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_GetFollowers_result__isset {
  _BackEndService_GetFollowers_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_GetFollowers_result__isset;

class BackEndService_GetFollowers_result {
 public:

  BackEndService_GetFollowers_result(const BackEndService_GetFollowers_result&);
  BackEndService_GetFollowers_result& operator=(const BackEndService_GetFollowers_result&);
  BackEndService_GetFollowers_result() {
  }

  virtual ~BackEndService_GetFollowers_result() throw();
  std::vector<int64_t>  success;
  ServiceException se;

  _BackEndService_GetFollowers_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_GetFollowers_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_GetFollowers_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_GetFollowers_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_GetFollowers_presult__isset {
  _BackEndService_GetFollowers_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_GetFollowers_presult__isset;

class BackEndService_GetFollowers_presult {
 public:


  virtual ~BackEndService_GetFollowers_presult() throw();
  std::vector<int64_t> * success;
  ServiceException se;

  _BackEndService_GetFollowers_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_Unfollow_args__isset {
  _BackEndService_Unfollow_args__isset() : user_id(false), followee_id(false) {}
  bool user_id :1;
  bool followee_id :1;
} _BackEndService_Unfollow_args__isset;

class BackEndService_Unfollow_args {
 public:

  BackEndService_Unfollow_args(const BackEndService_Unfollow_args&);
  BackEndService_Unfollow_args& operator=(const BackEndService_Unfollow_args&);
  BackEndService_Unfollow_args() : user_id(0), followee_id(0) {
  }

  virtual ~BackEndService_Unfollow_args() throw();
  int64_t user_id;
  int64_t followee_id;

  _BackEndService_Unfollow_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_followee_id(const int64_t val);

  bool operator == (const BackEndService_Unfollow_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(followee_id == rhs.followee_id))
      return false;
    return true;
  }
  bool operator != (const BackEndService_Unfollow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_Unfollow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_Unfollow_pargs {
 public:


  virtual ~BackEndService_Unfollow_pargs() throw();
  const int64_t* user_id;
  const int64_t* followee_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_Unfollow_result__isset {
  _BackEndService_Unfollow_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_Unfollow_result__isset;

class BackEndService_Unfollow_result {
 public:

  BackEndService_Unfollow_result(const BackEndService_Unfollow_result&);
  BackEndService_Unfollow_result& operator=(const BackEndService_Unfollow_result&);
  BackEndService_Unfollow_result() {
  }

  virtual ~BackEndService_Unfollow_result() throw();
  ServiceException se;

  _BackEndService_Unfollow_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_Unfollow_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_Unfollow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_Unfollow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_Unfollow_presult__isset {
  _BackEndService_Unfollow_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_Unfollow_presult__isset;

class BackEndService_Unfollow_presult {
 public:


  virtual ~BackEndService_Unfollow_presult() throw();
  ServiceException se;

  _BackEndService_Unfollow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_UnfollowWithUsername_args__isset {
  _BackEndService_UnfollowWithUsername_args__isset() : user_usernmae(false), followee_username(false) {}
  bool user_usernmae :1;
  bool followee_username :1;
} _BackEndService_UnfollowWithUsername_args__isset;

class BackEndService_UnfollowWithUsername_args {
 public:

  BackEndService_UnfollowWithUsername_args(const BackEndService_UnfollowWithUsername_args&);
  BackEndService_UnfollowWithUsername_args& operator=(const BackEndService_UnfollowWithUsername_args&);
  BackEndService_UnfollowWithUsername_args() : user_usernmae(), followee_username() {
  }

  virtual ~BackEndService_UnfollowWithUsername_args() throw();
  std::string user_usernmae;
  std::string followee_username;

  _BackEndService_UnfollowWithUsername_args__isset __isset;

  void __set_user_usernmae(const std::string& val);

  void __set_followee_username(const std::string& val);

  bool operator == (const BackEndService_UnfollowWithUsername_args & rhs) const
  {
    if (!(user_usernmae == rhs.user_usernmae))
      return false;
    if (!(followee_username == rhs.followee_username))
      return false;
    return true;
  }
  bool operator != (const BackEndService_UnfollowWithUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_UnfollowWithUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_UnfollowWithUsername_pargs {
 public:


  virtual ~BackEndService_UnfollowWithUsername_pargs() throw();
  const std::string* user_usernmae;
  const std::string* followee_username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_UnfollowWithUsername_result__isset {
  _BackEndService_UnfollowWithUsername_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_UnfollowWithUsername_result__isset;

class BackEndService_UnfollowWithUsername_result {
 public:

  BackEndService_UnfollowWithUsername_result(const BackEndService_UnfollowWithUsername_result&);
  BackEndService_UnfollowWithUsername_result& operator=(const BackEndService_UnfollowWithUsername_result&);
  BackEndService_UnfollowWithUsername_result() {
  }

  virtual ~BackEndService_UnfollowWithUsername_result() throw();
  ServiceException se;

  _BackEndService_UnfollowWithUsername_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_UnfollowWithUsername_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_UnfollowWithUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_UnfollowWithUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_UnfollowWithUsername_presult__isset {
  _BackEndService_UnfollowWithUsername_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_UnfollowWithUsername_presult__isset;

class BackEndService_UnfollowWithUsername_presult {
 public:


  virtual ~BackEndService_UnfollowWithUsername_presult() throw();
  ServiceException se;

  _BackEndService_UnfollowWithUsername_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_Follow_args__isset {
  _BackEndService_Follow_args__isset() : user_id(false), followee_id(false) {}
  bool user_id :1;
  bool followee_id :1;
} _BackEndService_Follow_args__isset;

class BackEndService_Follow_args {
 public:

  BackEndService_Follow_args(const BackEndService_Follow_args&);
  BackEndService_Follow_args& operator=(const BackEndService_Follow_args&);
  BackEndService_Follow_args() : user_id(0), followee_id(0) {
  }

  virtual ~BackEndService_Follow_args() throw();
  int64_t user_id;
  int64_t followee_id;

  _BackEndService_Follow_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_followee_id(const int64_t val);

  bool operator == (const BackEndService_Follow_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(followee_id == rhs.followee_id))
      return false;
    return true;
  }
  bool operator != (const BackEndService_Follow_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_Follow_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_Follow_pargs {
 public:


  virtual ~BackEndService_Follow_pargs() throw();
  const int64_t* user_id;
  const int64_t* followee_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_Follow_result__isset {
  _BackEndService_Follow_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_Follow_result__isset;

class BackEndService_Follow_result {
 public:

  BackEndService_Follow_result(const BackEndService_Follow_result&);
  BackEndService_Follow_result& operator=(const BackEndService_Follow_result&);
  BackEndService_Follow_result() {
  }

  virtual ~BackEndService_Follow_result() throw();
  ServiceException se;

  _BackEndService_Follow_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_Follow_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_Follow_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_Follow_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_Follow_presult__isset {
  _BackEndService_Follow_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_Follow_presult__isset;

class BackEndService_Follow_presult {
 public:


  virtual ~BackEndService_Follow_presult() throw();
  ServiceException se;

  _BackEndService_Follow_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_FollowWithUsername_args__isset {
  _BackEndService_FollowWithUsername_args__isset() : user_usernmae(false), followee_username(false) {}
  bool user_usernmae :1;
  bool followee_username :1;
} _BackEndService_FollowWithUsername_args__isset;

class BackEndService_FollowWithUsername_args {
 public:

  BackEndService_FollowWithUsername_args(const BackEndService_FollowWithUsername_args&);
  BackEndService_FollowWithUsername_args& operator=(const BackEndService_FollowWithUsername_args&);
  BackEndService_FollowWithUsername_args() : user_usernmae(), followee_username() {
  }

  virtual ~BackEndService_FollowWithUsername_args() throw();
  std::string user_usernmae;
  std::string followee_username;

  _BackEndService_FollowWithUsername_args__isset __isset;

  void __set_user_usernmae(const std::string& val);

  void __set_followee_username(const std::string& val);

  bool operator == (const BackEndService_FollowWithUsername_args & rhs) const
  {
    if (!(user_usernmae == rhs.user_usernmae))
      return false;
    if (!(followee_username == rhs.followee_username))
      return false;
    return true;
  }
  bool operator != (const BackEndService_FollowWithUsername_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_FollowWithUsername_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_FollowWithUsername_pargs {
 public:


  virtual ~BackEndService_FollowWithUsername_pargs() throw();
  const std::string* user_usernmae;
  const std::string* followee_username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_FollowWithUsername_result__isset {
  _BackEndService_FollowWithUsername_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_FollowWithUsername_result__isset;

class BackEndService_FollowWithUsername_result {
 public:

  BackEndService_FollowWithUsername_result(const BackEndService_FollowWithUsername_result&);
  BackEndService_FollowWithUsername_result& operator=(const BackEndService_FollowWithUsername_result&);
  BackEndService_FollowWithUsername_result() {
  }

  virtual ~BackEndService_FollowWithUsername_result() throw();
  ServiceException se;

  _BackEndService_FollowWithUsername_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_FollowWithUsername_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_FollowWithUsername_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_FollowWithUsername_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_FollowWithUsername_presult__isset {
  _BackEndService_FollowWithUsername_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_FollowWithUsername_presult__isset;

class BackEndService_FollowWithUsername_presult {
 public:


  virtual ~BackEndService_FollowWithUsername_presult() throw();
  ServiceException se;

  _BackEndService_FollowWithUsername_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_GetFollowees_args__isset {
  _BackEndService_GetFollowees_args__isset() : user_id(false) {}
  bool user_id :1;
} _BackEndService_GetFollowees_args__isset;

class BackEndService_GetFollowees_args {
 public:

  BackEndService_GetFollowees_args(const BackEndService_GetFollowees_args&);
  BackEndService_GetFollowees_args& operator=(const BackEndService_GetFollowees_args&);
  BackEndService_GetFollowees_args() : user_id(0) {
  }

  virtual ~BackEndService_GetFollowees_args() throw();
  int64_t user_id;

  _BackEndService_GetFollowees_args__isset __isset;

  void __set_user_id(const int64_t val);

  bool operator == (const BackEndService_GetFollowees_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const BackEndService_GetFollowees_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_GetFollowees_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_GetFollowees_pargs {
 public:


  virtual ~BackEndService_GetFollowees_pargs() throw();
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_GetFollowees_result__isset {
  _BackEndService_GetFollowees_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_GetFollowees_result__isset;

class BackEndService_GetFollowees_result {
 public:

  BackEndService_GetFollowees_result(const BackEndService_GetFollowees_result&);
  BackEndService_GetFollowees_result& operator=(const BackEndService_GetFollowees_result&);
  BackEndService_GetFollowees_result() {
  }

  virtual ~BackEndService_GetFollowees_result() throw();
  std::vector<int64_t>  success;
  ServiceException se;

  _BackEndService_GetFollowees_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_GetFollowees_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_GetFollowees_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_GetFollowees_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_GetFollowees_presult__isset {
  _BackEndService_GetFollowees_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_GetFollowees_presult__isset;

class BackEndService_GetFollowees_presult {
 public:


  virtual ~BackEndService_GetFollowees_presult() throw();
  std::vector<int64_t> * success;
  ServiceException se;

  _BackEndService_GetFollowees_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_ReadHomeTimeline_args__isset {
  _BackEndService_ReadHomeTimeline_args__isset() : user_id(false), start(false), stop(false) {}
  bool user_id :1;
  bool start :1;
  bool stop :1;
} _BackEndService_ReadHomeTimeline_args__isset;

class BackEndService_ReadHomeTimeline_args {
 public:

  BackEndService_ReadHomeTimeline_args(const BackEndService_ReadHomeTimeline_args&);
  BackEndService_ReadHomeTimeline_args& operator=(const BackEndService_ReadHomeTimeline_args&);
  BackEndService_ReadHomeTimeline_args() : user_id(0), start(0), stop(0) {
  }

  virtual ~BackEndService_ReadHomeTimeline_args() throw();
  int64_t user_id;
  int32_t start;
  int32_t stop;

  _BackEndService_ReadHomeTimeline_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  bool operator == (const BackEndService_ReadHomeTimeline_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    return true;
  }
  bool operator != (const BackEndService_ReadHomeTimeline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_ReadHomeTimeline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_ReadHomeTimeline_pargs {
 public:


  virtual ~BackEndService_ReadHomeTimeline_pargs() throw();
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_ReadHomeTimeline_result__isset {
  _BackEndService_ReadHomeTimeline_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_ReadHomeTimeline_result__isset;

class BackEndService_ReadHomeTimeline_result {
 public:

  BackEndService_ReadHomeTimeline_result(const BackEndService_ReadHomeTimeline_result&);
  BackEndService_ReadHomeTimeline_result& operator=(const BackEndService_ReadHomeTimeline_result&);
  BackEndService_ReadHomeTimeline_result() {
  }

  virtual ~BackEndService_ReadHomeTimeline_result() throw();
  std::vector<Post>  success;
  ServiceException se;

  _BackEndService_ReadHomeTimeline_result__isset __isset;

  void __set_success(const std::vector<Post> & val);

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_ReadHomeTimeline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_ReadHomeTimeline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_ReadHomeTimeline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_ReadHomeTimeline_presult__isset {
  _BackEndService_ReadHomeTimeline_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_ReadHomeTimeline_presult__isset;

class BackEndService_ReadHomeTimeline_presult {
 public:


  virtual ~BackEndService_ReadHomeTimeline_presult() throw();
  std::vector<Post> * success;
  ServiceException se;

  _BackEndService_ReadHomeTimeline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_UploadMedia_args__isset {
  _BackEndService_UploadMedia_args__isset() : filename(false), data(false) {}
  bool filename :1;
  bool data :1;
} _BackEndService_UploadMedia_args__isset;

class BackEndService_UploadMedia_args {
 public:

  BackEndService_UploadMedia_args(const BackEndService_UploadMedia_args&);
  BackEndService_UploadMedia_args& operator=(const BackEndService_UploadMedia_args&);
  BackEndService_UploadMedia_args() : filename(), data() {
  }

  virtual ~BackEndService_UploadMedia_args() throw();
  std::string filename;
  std::string data;

  _BackEndService_UploadMedia_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const BackEndService_UploadMedia_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const BackEndService_UploadMedia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_UploadMedia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_UploadMedia_pargs {
 public:


  virtual ~BackEndService_UploadMedia_pargs() throw();
  const std::string* filename;
  const std::string* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_UploadMedia_result__isset {
  _BackEndService_UploadMedia_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_UploadMedia_result__isset;

class BackEndService_UploadMedia_result {
 public:

  BackEndService_UploadMedia_result(const BackEndService_UploadMedia_result&);
  BackEndService_UploadMedia_result& operator=(const BackEndService_UploadMedia_result&);
  BackEndService_UploadMedia_result() {
  }

  virtual ~BackEndService_UploadMedia_result() throw();
  ServiceException se;

  _BackEndService_UploadMedia_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_UploadMedia_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_UploadMedia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_UploadMedia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_UploadMedia_presult__isset {
  _BackEndService_UploadMedia_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_UploadMedia_presult__isset;

class BackEndService_UploadMedia_presult {
 public:


  virtual ~BackEndService_UploadMedia_presult() throw();
  ServiceException se;

  _BackEndService_UploadMedia_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_GetMedia_args__isset {
  _BackEndService_GetMedia_args__isset() : filename(false) {}
  bool filename :1;
} _BackEndService_GetMedia_args__isset;

class BackEndService_GetMedia_args {
 public:

  BackEndService_GetMedia_args(const BackEndService_GetMedia_args&);
  BackEndService_GetMedia_args& operator=(const BackEndService_GetMedia_args&);
  BackEndService_GetMedia_args() : filename() {
  }

  virtual ~BackEndService_GetMedia_args() throw();
  std::string filename;

  _BackEndService_GetMedia_args__isset __isset;

  void __set_filename(const std::string& val);

  bool operator == (const BackEndService_GetMedia_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const BackEndService_GetMedia_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_GetMedia_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_GetMedia_pargs {
 public:


  virtual ~BackEndService_GetMedia_pargs() throw();
  const std::string* filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_GetMedia_result__isset {
  _BackEndService_GetMedia_result__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_GetMedia_result__isset;

class BackEndService_GetMedia_result {
 public:

  BackEndService_GetMedia_result(const BackEndService_GetMedia_result&);
  BackEndService_GetMedia_result& operator=(const BackEndService_GetMedia_result&);
  BackEndService_GetMedia_result() : success() {
  }

  virtual ~BackEndService_GetMedia_result() throw();
  std::string success;
  ServiceException se;

  _BackEndService_GetMedia_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_GetMedia_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_GetMedia_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_GetMedia_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_GetMedia_presult__isset {
  _BackEndService_GetMedia_presult__isset() : success(false), se(false) {}
  bool success :1;
  bool se :1;
} _BackEndService_GetMedia_presult__isset;

class BackEndService_GetMedia_presult {
 public:


  virtual ~BackEndService_GetMedia_presult() throw();
  std::string* success;
  ServiceException se;

  _BackEndService_GetMedia_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackEndService_RemovePosts_args__isset {
  _BackEndService_RemovePosts_args__isset() : user_id(false), start(false), stop(false) {}
  bool user_id :1;
  bool start :1;
  bool stop :1;
} _BackEndService_RemovePosts_args__isset;

class BackEndService_RemovePosts_args {
 public:

  BackEndService_RemovePosts_args(const BackEndService_RemovePosts_args&);
  BackEndService_RemovePosts_args& operator=(const BackEndService_RemovePosts_args&);
  BackEndService_RemovePosts_args() : user_id(0), start(0), stop(0) {
  }

  virtual ~BackEndService_RemovePosts_args() throw();
  int64_t user_id;
  int32_t start;
  int32_t stop;

  _BackEndService_RemovePosts_args__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_start(const int32_t val);

  void __set_stop(const int32_t val);

  bool operator == (const BackEndService_RemovePosts_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(start == rhs.start))
      return false;
    if (!(stop == rhs.stop))
      return false;
    return true;
  }
  bool operator != (const BackEndService_RemovePosts_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_RemovePosts_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackEndService_RemovePosts_pargs {
 public:


  virtual ~BackEndService_RemovePosts_pargs() throw();
  const int64_t* user_id;
  const int32_t* start;
  const int32_t* stop;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_RemovePosts_result__isset {
  _BackEndService_RemovePosts_result__isset() : se(false) {}
  bool se :1;
} _BackEndService_RemovePosts_result__isset;

class BackEndService_RemovePosts_result {
 public:

  BackEndService_RemovePosts_result(const BackEndService_RemovePosts_result&);
  BackEndService_RemovePosts_result& operator=(const BackEndService_RemovePosts_result&);
  BackEndService_RemovePosts_result() {
  }

  virtual ~BackEndService_RemovePosts_result() throw();
  ServiceException se;

  _BackEndService_RemovePosts_result__isset __isset;

  void __set_se(const ServiceException& val);

  bool operator == (const BackEndService_RemovePosts_result & rhs) const
  {
    if (!(se == rhs.se))
      return false;
    return true;
  }
  bool operator != (const BackEndService_RemovePosts_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackEndService_RemovePosts_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackEndService_RemovePosts_presult__isset {
  _BackEndService_RemovePosts_presult__isset() : se(false) {}
  bool se :1;
} _BackEndService_RemovePosts_presult__isset;

class BackEndService_RemovePosts_presult {
 public:


  virtual ~BackEndService_RemovePosts_presult() throw();
  ServiceException se;

  _BackEndService_RemovePosts_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BackEndServiceClient : virtual public BackEndServiceIf {
 public:
  BackEndServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BackEndServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ComposePost(const std::string& username, const int64_t user_id, const std::string& text, const std::vector<int64_t> & media_ids, const std::vector<std::string> & media_types, const PostType::type post_type);
  void send_ComposePost(const std::string& username, const int64_t user_id, const std::string& text, const std::vector<int64_t> & media_ids, const std::vector<std::string> & media_types, const PostType::type post_type);
  void recv_ComposePost();
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop);
  void send_ReadUserTimeline(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_ReadUserTimeline(std::vector<Post> & _return);
  void Login(std::string& _return, const std::string& username, const std::string& password);
  void send_Login(const std::string& username, const std::string& password);
  void recv_Login(std::string& _return);
  void RegisterUser(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  void send_RegisterUser(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  void recv_RegisterUser();
  void RegisterUserWithId(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  void send_RegisterUserWithId(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  void recv_RegisterUserWithId();
  void GetFollowers(std::vector<int64_t> & _return, const int64_t user_id);
  void send_GetFollowers(const int64_t user_id);
  void recv_GetFollowers(std::vector<int64_t> & _return);
  void Unfollow(const int64_t user_id, const int64_t followee_id);
  void send_Unfollow(const int64_t user_id, const int64_t followee_id);
  void recv_Unfollow();
  void UnfollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  void send_UnfollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  void recv_UnfollowWithUsername();
  void Follow(const int64_t user_id, const int64_t followee_id);
  void send_Follow(const int64_t user_id, const int64_t followee_id);
  void recv_Follow();
  void FollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  void send_FollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  void recv_FollowWithUsername();
  void GetFollowees(std::vector<int64_t> & _return, const int64_t user_id);
  void send_GetFollowees(const int64_t user_id);
  void recv_GetFollowees(std::vector<int64_t> & _return);
  void ReadHomeTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop);
  void send_ReadHomeTimeline(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_ReadHomeTimeline(std::vector<Post> & _return);
  void UploadMedia(const std::string& filename, const std::string& data);
  void send_UploadMedia(const std::string& filename, const std::string& data);
  void recv_UploadMedia();
  void GetMedia(std::string& _return, const std::string& filename);
  void send_GetMedia(const std::string& filename);
  void recv_GetMedia(std::string& _return);
  void RemovePosts(const int64_t user_id, const int32_t start, const int32_t stop);
  void send_RemovePosts(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_RemovePosts();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BackEndServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<BackEndServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BackEndServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ComposePost(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadUserTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RegisterUserWithId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFollowers(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Unfollow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UnfollowWithUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Follow(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FollowWithUsername(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetFollowees(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ReadHomeTimeline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UploadMedia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetMedia(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_RemovePosts(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BackEndServiceProcessor(::apache::thrift::stdcxx::shared_ptr<BackEndServiceIf> iface) :
    iface_(iface) {
    processMap_["ComposePost"] = &BackEndServiceProcessor::process_ComposePost;
    processMap_["ReadUserTimeline"] = &BackEndServiceProcessor::process_ReadUserTimeline;
    processMap_["Login"] = &BackEndServiceProcessor::process_Login;
    processMap_["RegisterUser"] = &BackEndServiceProcessor::process_RegisterUser;
    processMap_["RegisterUserWithId"] = &BackEndServiceProcessor::process_RegisterUserWithId;
    processMap_["GetFollowers"] = &BackEndServiceProcessor::process_GetFollowers;
    processMap_["Unfollow"] = &BackEndServiceProcessor::process_Unfollow;
    processMap_["UnfollowWithUsername"] = &BackEndServiceProcessor::process_UnfollowWithUsername;
    processMap_["Follow"] = &BackEndServiceProcessor::process_Follow;
    processMap_["FollowWithUsername"] = &BackEndServiceProcessor::process_FollowWithUsername;
    processMap_["GetFollowees"] = &BackEndServiceProcessor::process_GetFollowees;
    processMap_["ReadHomeTimeline"] = &BackEndServiceProcessor::process_ReadHomeTimeline;
    processMap_["UploadMedia"] = &BackEndServiceProcessor::process_UploadMedia;
    processMap_["GetMedia"] = &BackEndServiceProcessor::process_GetMedia;
    processMap_["RemovePosts"] = &BackEndServiceProcessor::process_RemovePosts;
  }

  virtual ~BackEndServiceProcessor() {}
};

class BackEndServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BackEndServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< BackEndServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< BackEndServiceIfFactory > handlerFactory_;
};

class BackEndServiceMultiface : virtual public BackEndServiceIf {
 public:
  BackEndServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<BackEndServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BackEndServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<BackEndServiceIf> > ifaces_;
  BackEndServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<BackEndServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ComposePost(const std::string& username, const int64_t user_id, const std::string& text, const std::vector<int64_t> & media_ids, const std::vector<std::string> & media_types, const PostType::type post_type) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ComposePost(username, user_id, text, media_ids, media_types, post_type);
    }
    ifaces_[i]->ComposePost(username, user_id, text, media_ids, media_types, post_type);
  }

  void ReadUserTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadUserTimeline(_return, user_id, start, stop);
    }
    ifaces_[i]->ReadUserTimeline(_return, user_id, start, stop);
    return;
  }

  void Login(std::string& _return, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(_return, username, password);
    }
    ifaces_[i]->Login(_return, username, password);
    return;
  }

  void RegisterUser(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterUser(first_name, last_name, username, password);
    }
    ifaces_[i]->RegisterUser(first_name, last_name, username, password);
  }

  void RegisterUserWithId(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RegisterUserWithId(first_name, last_name, username, password, user_id);
    }
    ifaces_[i]->RegisterUserWithId(first_name, last_name, username, password, user_id);
  }

  void GetFollowers(std::vector<int64_t> & _return, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFollowers(_return, user_id);
    }
    ifaces_[i]->GetFollowers(_return, user_id);
    return;
  }

  void Unfollow(const int64_t user_id, const int64_t followee_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Unfollow(user_id, followee_id);
    }
    ifaces_[i]->Unfollow(user_id, followee_id);
  }

  void UnfollowWithUsername(const std::string& user_usernmae, const std::string& followee_username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UnfollowWithUsername(user_usernmae, followee_username);
    }
    ifaces_[i]->UnfollowWithUsername(user_usernmae, followee_username);
  }

  void Follow(const int64_t user_id, const int64_t followee_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Follow(user_id, followee_id);
    }
    ifaces_[i]->Follow(user_id, followee_id);
  }

  void FollowWithUsername(const std::string& user_usernmae, const std::string& followee_username) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FollowWithUsername(user_usernmae, followee_username);
    }
    ifaces_[i]->FollowWithUsername(user_usernmae, followee_username);
  }

  void GetFollowees(std::vector<int64_t> & _return, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetFollowees(_return, user_id);
    }
    ifaces_[i]->GetFollowees(_return, user_id);
    return;
  }

  void ReadHomeTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ReadHomeTimeline(_return, user_id, start, stop);
    }
    ifaces_[i]->ReadHomeTimeline(_return, user_id, start, stop);
    return;
  }

  void UploadMedia(const std::string& filename, const std::string& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UploadMedia(filename, data);
    }
    ifaces_[i]->UploadMedia(filename, data);
  }

  void GetMedia(std::string& _return, const std::string& filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetMedia(_return, filename);
    }
    ifaces_[i]->GetMedia(_return, filename);
    return;
  }

  void RemovePosts(const int64_t user_id, const int32_t start, const int32_t stop) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->RemovePosts(user_id, start, stop);
    }
    ifaces_[i]->RemovePosts(user_id, start, stop);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class BackEndServiceConcurrentClient : virtual public BackEndServiceIf {
 public:
  BackEndServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  BackEndServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ComposePost(const std::string& username, const int64_t user_id, const std::string& text, const std::vector<int64_t> & media_ids, const std::vector<std::string> & media_types, const PostType::type post_type);
  int32_t send_ComposePost(const std::string& username, const int64_t user_id, const std::string& text, const std::vector<int64_t> & media_ids, const std::vector<std::string> & media_types, const PostType::type post_type);
  void recv_ComposePost(const int32_t seqid);
  void ReadUserTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop);
  int32_t send_ReadUserTimeline(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_ReadUserTimeline(std::vector<Post> & _return, const int32_t seqid);
  void Login(std::string& _return, const std::string& username, const std::string& password);
  int32_t send_Login(const std::string& username, const std::string& password);
  void recv_Login(std::string& _return, const int32_t seqid);
  void RegisterUser(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  int32_t send_RegisterUser(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password);
  void recv_RegisterUser(const int32_t seqid);
  void RegisterUserWithId(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  int32_t send_RegisterUserWithId(const std::string& first_name, const std::string& last_name, const std::string& username, const std::string& password, const int64_t user_id);
  void recv_RegisterUserWithId(const int32_t seqid);
  void GetFollowers(std::vector<int64_t> & _return, const int64_t user_id);
  int32_t send_GetFollowers(const int64_t user_id);
  void recv_GetFollowers(std::vector<int64_t> & _return, const int32_t seqid);
  void Unfollow(const int64_t user_id, const int64_t followee_id);
  int32_t send_Unfollow(const int64_t user_id, const int64_t followee_id);
  void recv_Unfollow(const int32_t seqid);
  void UnfollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  int32_t send_UnfollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  void recv_UnfollowWithUsername(const int32_t seqid);
  void Follow(const int64_t user_id, const int64_t followee_id);
  int32_t send_Follow(const int64_t user_id, const int64_t followee_id);
  void recv_Follow(const int32_t seqid);
  void FollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  int32_t send_FollowWithUsername(const std::string& user_usernmae, const std::string& followee_username);
  void recv_FollowWithUsername(const int32_t seqid);
  void GetFollowees(std::vector<int64_t> & _return, const int64_t user_id);
  int32_t send_GetFollowees(const int64_t user_id);
  void recv_GetFollowees(std::vector<int64_t> & _return, const int32_t seqid);
  void ReadHomeTimeline(std::vector<Post> & _return, const int64_t user_id, const int32_t start, const int32_t stop);
  int32_t send_ReadHomeTimeline(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_ReadHomeTimeline(std::vector<Post> & _return, const int32_t seqid);
  void UploadMedia(const std::string& filename, const std::string& data);
  int32_t send_UploadMedia(const std::string& filename, const std::string& data);
  void recv_UploadMedia(const int32_t seqid);
  void GetMedia(std::string& _return, const std::string& filename);
  int32_t send_GetMedia(const std::string& filename);
  void recv_GetMedia(std::string& _return, const int32_t seqid);
  void RemovePosts(const int64_t user_id, const int32_t start, const int32_t stop);
  int32_t send_RemovePosts(const int64_t user_id, const int32_t start, const int32_t stop);
  void recv_RemovePosts(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
